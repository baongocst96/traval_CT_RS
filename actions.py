# -*- coding: utf-8 -*-
from typing import Dict, Text, Any, List, Union, Optional
from rasa_sdk import Tracker, Action
from rasa_sdk.events import SlotSet
from rasa_sdk.forms import FormAction
from rasa_sdk.executor import CollectingDispatcher
import json, datetime

class ViTri(Action):
    def name(self) -> Text:
        return "action_traval_detail"

    def forrmat_payload(self, key, value):
        enti = {key:value.lower()}
        return json.dumps(enti)

    def list_button(seft, thong_tin):
        buttons = []
        buttons.append({
            "title":"üîçüîç th√¥ng tin "+thong_tin,
            "payload":"/request_thongtin{}".format(seft.forrmat_payload("thong_tin", thong_tin))
            })
        buttons.append({
            "title":"üöó ƒë·ªãa ch·ªâ "+thong_tin,
            "payload" : "/request_vitri{}".format(seft.forrmat_payload("vi_tri", thong_tin))
            })
        buttons.append({
            "title":"üèÑüèæ‚Äç‚ôÇÔ∏èüèÑüèæ‚Äç‚ôÇÔ∏è ch∆°i g√¨ ·ªü "+thong_tin,
            "payload":"/request_hoatdong{}".format(seft.forrmat_payload("hoat_dong", thong_tin))
            })
        buttons.append({
            "title":"üè¶üè¶ chi ph√≠ ·ªü "+thong_tin,
            "payload":"/request_chiphi{}".format(seft.forrmat_payload("chi_phi", thong_tin))
            })
        buttons.append({
            "title":"üèûüèû kh√°m ph√° ƒë·ªãa ƒëi·ªÉm kh√°c",
            "payload":"/request_chung"
            })

        return buttons

    def run(
        self, 
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
        ) -> List[Dict]:
        
        dict_intent = {
        "request_vitri": "vi_tri",
        "request_thongtin": "thong_tin",
        "request_hoatdong": "hoat_dong",
        "request_chiphi": "chi_phi"
        }
        dict_thongtinct = {
        "b·∫øn ninh ki·ªÅu":{
            "thong_tin": "Theo Wiki: B·∫øn Ninh Ki·ªÅu l√† m·ªôt ƒë·ªãa danh du l·ªãch c√≥ t·ª´ l√¢u v√† h·∫•p d·∫´n du kh√°ch b·ªüi phong c·∫£nh s√¥ng n∆∞·ªõc h·ªØu t√¨nh v√† v·ªã tr√≠ thu·∫≠n l·ª£i nh√¨n ra d√≤ng s√¥ng H·∫≠u. T·ª´ l√¢u b·∫øn Ninh Ki·ªÅu ƒë√£ tr·ªü th√†nh bi·ªÉu t∆∞·ª£ng v·ªÅ n√©t ƒë·∫πp th∆° m·ªông b√™n b·ªù s√¥ng H·∫≠u c·ªßa c·∫£ Th√†nh ph·ªë C·∫ßn Th∆°, thu h√∫t nhi·ªÅu du kh√°ch ƒë·∫øn tham quan v√† ƒëi v√†o th∆° ca.",
            "hoat_dong": "ƒÇn u·ªëng, ch·ª•p h√¨nh, ƒëi d·∫°o",
            "chi_phi": "kh√¥ng c√≥ v√© v√†o c·ªïng, ƒë·ªì ƒÉn gi√° c·∫£ h·ª£p l√Ω ",
            "img":"file:///media/baongocst/Free/projectPY/Nam/images/locations_travel/ben_ninh_kieu.jpg",
            "vi_tri":"N·∫±m ·ªü: 38 Hai B√† Tr∆∞ng, ‚Äã‚ÄãT√¢n An, Ninh Ki·ªÅu, C·∫ßn Th∆° \n B·∫°n c√≥ th·ªÉ di chuy·ªÉn b·∫±ng √¥ t√¥ ho·∫∑c xe m√°y ƒë√©n ƒë√≥"
            },
        "ch·ª£ ƒë√™m":{
            "thong_tin": "·ªû ƒë√¢y c√≥ b√°n r·∫•t nhi·ªÅu m√≥n ngon, trong ƒë√≥ c√≥ nh·ªØng m√≥n ƒë·∫∑c tr∆∞ng c·ªßa mi·ªÅn T√¢y m√† ti√™u bi·ªÉu l√† nh·ªØng m√≥n ch√®",
            "hoat_dong": "ƒÇn u·ªëng, ch·ª•p h√¨nh, ƒëi d·∫°o, shopping",
            "chi_phi": "kh√¥ng c√≥ v√© v√†o c·ªïng, ƒë·ªì ƒÉn ngon, qu·∫ßn √°o gi√° c·∫£ h·ª£p l√Ω",
            "img":"file:///media/baongocst/Free/projectPY/Nam/images/locations_travel/cho_dem.png",
            "vi_tri":"N·∫±m ·ªü: Hai B√† Tr∆∞ng, T√¢n An, Ninh Ki·ªÅu, C·∫ßn Th∆°, Vi·ªát Nam \n B·∫°n c√≥ th·ªÉ di chuy·ªÉn b·∫±ng √¥ t√¥ ho·∫∑c xe m√°y ƒë√©n ƒë√≥" 
            },
        "nh√† c·ªï b√¨nh th·ªßy":{
            "thong_tin": "B·∫±ng gi√° tr·ªã ki·∫øn tr√∫c, l·ªãch s·ª≠ c·ªßa m√¨nh, nh√† c·ªï B√¨nh Th·ªßy ƒë√£ ƒë∆∞·ª£c c√¥ng nh·∫≠n l√† ‚Äúdi t√≠ch ngh·ªá thu·∫≠t c·∫•p qu·ªëc gia‚Äù, ng√†y c√†ng thu h√∫t nhi·ªÅu kh√°ch ƒë·∫øn thƒÉm c≈©ng nh∆∞ c√°c ƒëo√†n l√†m phim v·ªÅ m∆∞·ª£n b·ªëi c·∫£nh cho nh·ªØng th∆∞·ªõc phim c·ªßa m√¨nh.",
            "hoat_dong": "tham quan , ch·ª•p ·∫£nh",
            "chi_phi": "kh√¥ng c√≥ v√© v√†o c·ªïng",
            "img":"file:///media/baongocst/Free/projectPY/Nam/images/locations_travel/nha_co_binh_thuy.jpg",
            "vi_tri":"N·∫±m ·ªü: 144 B√πi H·ªØu Nghƒ©a, B√¨nh Thu·ª∑, B√¨nh Th·ªßy, C·∫ßn Th∆°, Vi·ªát Nam \n\ B·∫°n c√≥ th·ªÉ di chuy·ªÉn b·∫±ng √¥ t√¥ ho·∫∑c xe m√°y ƒë√©n ƒë√≥"
            },
        "v∆∞·ªùn c√¢y m·ªπ kh√°nh":{
            "thong_tin": "ƒê·∫∑t ch√¢n t·ªõi v∆∞·ªùn tr√°i c√¢y n√†y th√¨ b·∫°n s·∫Ω ƒë∆∞·ª£c tham quan h∆°n 20 gi·ªëng c√¢y tr·ªìng kh√°c nhau s·∫Ω cho b·∫°n m·ªôt tr·∫£i nghi·ªám ƒë·∫∑c bi·ªát.",
            "hoat_dong": "tham quan , ch·ª•p ·∫£nh, h√°i tr√°i c√¢y t·∫°i v∆∞·ªùn v√† c√°c tr√≤ ch∆°i d√¢n gian h·∫•p d·∫´n",
            "chi_phi": "v√© v√†o c·ªïng 20k/ng, h√°i tr√°i c√¢y ƒÉn t·∫°i v∆∞·ªùn, mang v·ªÅ t√≠nh theo gi√° c·ªßa v∆∞·ªùn",
            "img":"file:///media/baongocst/Free/projectPY/Nam/images/locations_travel/my_khanh.jpeg",
            "vi_tri":"N·∫±m ·ªü: M·ªπ Kh√°nh, Phong ƒêi·ªÅn, C·∫ßn Th∆°, Vi·ªát Nam \n B·∫°n c√≥ th·ªÉ di chuy·ªÉn b·∫±ng √¥ t√¥ ho·∫∑c xe m√°y ƒë√©n ƒë√≥"
            },
        "ch·ª£ n·ªïi c√°i rƒÉng":{
            "thong_tin": "Theo Wiki: Ch·ª£ n·ªïi C√°i RƒÉng l√† ch·ª£ n·ªïi chuy√™n trao ƒë·ªïi, mua b√°n n√¥ng s·∫£n, c√°c lo·∫°i tr√°i c√¢y, h√†ng h√≥a, th·ª±c ph·∫©m, ƒÉn u·ªëng ·ªü tr√™n s√¥ng v√† l√† ƒëi·ªÉm tham quan ƒë·∫∑c s·∫Øc c·ªßa qu·∫≠n C√°i RƒÉng, th√†nh ph·ªë C·∫ßn Th∆°",
            "hoat_dong": "tham quan , ch·ª•p ·∫£nh, ƒëi thuy·ªÅn tham quan ch·ª£ n·ªïi",
            "chi_phi": "v√© tham quan b·∫±ng thuy√™n 200k/ng",
            "img":"file:///media/baongocst/Free/projectPY/Nam/images/locations_travel/cho_noi_cai_rang.jpg",
            "vi_tri":"N·∫±m ·ªü: 46 Hai B√† Tr∆∞ng, L√™ B√¨nh, C√°i RƒÉng, C·∫ßn Th∆° \n B·∫°n c√≥ th·ªÉ di chuy·ªÉn b·∫±ng √¥ t√¥ ho·∫∑c xe m√°y ƒë·∫øn b·∫øn t√†u dau ƒë√≥ thu√™ thuy·ªÅn ƒë·ªÉ tham quan tr·ª£ n·ªïi"
            }

        }
        if  tracker.latest_message['intent'].get('name') == 'request_chung':
            intro = "ƒê·∫øn t·ªõi C·∫ßn Th∆° th√¨ b·∫°n kh√¥ng th·ªÉ b·ªè qua c√°c ƒë·ªãa ƒëi·ªÉm nh∆∞ B·∫øn Ninh Ki·ªÅu, Ch√πa √îng, Ch·ª£ ƒê√™m, nh√† c·ªï B√¨nh Th·ªßy, V∆∞·ªùn c√¢y M·ªπ Kh√°nh, Thi·ªÅn Vi·ªán Tr√∫c L√¢m"
            buttons=[]
            for keys, text in dict_thongtinct.items():
                buttons.append({
                    "title":keys,
                    "payload": "/request_thongtin{}".format(self.forrmat_payload("thong_tin", keys))
                    })
            dispatcher.utter_button_message(intro, buttons=buttons)
        else:
            intent_name = tracker.latest_message['intent'].get('name')
            slot_name = dict_intent[intent_name]
            thong_tin = next(tracker.get_latest_entity_values(slot_name), None)
            # thong_tin = tracker.get_slot(slot_name)
            thong_tin = thong_tin.replace('_',' ')
            ask = dict_thongtinct[thong_tin][slot_name]
            buttons = self.list_button(thong_tin)
            if(intent_name == 'request_thongtin'):  
                dispatcher.utter_media(dict_thongtinct[thong_tin]['img'], "image")
            dispatcher.utter_button_message(ask,buttons=buttons)

        
        return []

        ##if any(tracker.get_latest_entity_values("CT"))

# find hottel 
# sear hottel with location and quality
# show infor hottel, view price, price, adress 
# => form book room

class find_hottel(Action):
    def name(self) -> Text:
        return "action_find_hottel"

    def forrmat_payload(self, enti):
        return json.dumps(enti)

    def run(
        self, 
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
        ) -> List[Dict]:
        
        dict_listhottel = {
        "khach san TTC":
            {
            "name_hottel":"khach san TTC",
            "lc_hottel":"qu·∫≠n ninh ki·ªÅu",
            "qu_hottel":"kh√°ch s·∫°n ch·∫•t l∆∞·ª£ng",
            "img_hottel":"file:///media/baongocst/Free/projectPY/Nam/images/hottel/ttc_hottel.jpg",
            "adress_Hottel":"312/2 B·∫øn Ninh ki·ªÅu th√†nh ph·ªë c·∫ßn th∆°",
            "detail": "kh√°ch s·∫°n s·∫°ch s·∫ª tho√°ng m√°t ƒë√™m 500k",
            "price":"500"
            },
        "khach san T√¢y Nam":
            {
            "name_hottel":"khach san T√¢y Nam",
            "lc_hottel":"qu·∫≠n c√°i rƒÉng",
            "qu_hottel":"kh√°ch s·∫°n ch·∫•t l∆∞·ª£ng",
            "img_hottel":"file:///media/baongocst/Free/projectPY/Nam/images/hottel/taynam_hottel.jpg",
            "adress_Hottel":"312/2 c√¢√π quang trung th√†nh ph·ªë c·∫ßn th∆°",
            "detail": "kh√°ch s·∫°n s·∫°ch s·∫ª tho√°ng m√°t ƒë√™m 300k",
            "price":"300"
            }
        }

        menu_show = {
        "name_hottel":"T√™n kh√°ch s·∫°n",
        "lc_hottel":"Khu v·ª±c",
        "qu_hottel":"Lo·∫°i kh√°ch s·∫°n",
        "adress_Hottel":"ƒê·ªãa ch·ªâ",
        "detail":"Th√¥ng tin chung",
        "price":"T·∫ßm Gi√°"
        }

        if  tracker.latest_message['intent'].get('name') == 'request_hottel':
            if any(tracker.get_latest_entity_values("lc_hottel")):
                lc_hottel = next(tracker.get_latest_entity_values("lc_hottel"), None)  ## value entity 
            else:
                intro = "D∆∞·ªõi ƒë√¢y l√† m·ªôt v√†i g·ª£i √Ω ph√π h·ª£p cho b·∫°n:"                
                buttons = []
                for keys, text in dict_listhottel.items():                    
                    buttons.append({
                        "title":keys,
                        "payload": "/info_hottel{}".format(self.forrmat_payload({"name_hottel": dict_listhottel[keys]['name_hottel']}))
                        })
                dispatcher.utter_button_message(intro,buttons=buttons)  
        if tracker.latest_message['intent'].get('name') == 'info_hottel':
            info = dict_listhottel[next(tracker.get_latest_entity_values("name_hottel"), None)]
            detail = ''
            for key, text in info.items():
                if(key != 'img_hottel'):
                    detail += str(menu_show[key]) + ' : ' + text + '\n\n\n' 
            dispatcher.utter_media(info['img_hottel'], "image")
            bt_datphong = []
            bt_datphong.append({
                "title":"ƒê·∫∑t ph√≤ng",
                "payload":"/form_hottel{}".format(self.forrmat_payload({'lc_hottel':info['lc_hottel'], 'qu_hottel':info['qu_hottel']}))
                })
            bt_datphong.append({
                "title":"ch·ªçn kh√°ch s·∫°n kh√°c",
                "payload":"/request_hottel"
                })

            dispatcher.utter_button_message(detail,buttons=bt_datphong)

# form book hottel 
# request numberroom, time, sdt
# show kq
class HottelForm(FormAction):
    """Example of a custom form action"""

    def name(self) -> Text:
        """Unique identifier of the form"""

        return "hottel_form"

    @staticmethod
    def required_slots(tracker: Tracker) -> List[Text]:
        """A list of required slots that the form has to fill"""

        return ["name_hottel","num_room", "time", "sdt", "note_hottel"]

    def slot_mappings(self) -> Dict[Text, Union[Dict, List[Dict]]]:
        """A dictionary to map required slots to
            - an extracted entity
            - intent: value pairs
            - a whole message
            or a list of them, where a first match will be picked"""

        return {
            "time": [
            self.from_entity(entity="time"),
            self.from_text()
            ],
            "num_room":  [
            self.from_entity(entity="num_room"),
            self.from_text()
            ],                      
            "sdt": self.from_text(),
            "name_hottel":[
            self.from_entity(entity="name_hottel"),
            self.from_text()
            ],
            "note_hottel": self.from_text()           
            
        }

    def forrmat_payload(self, enti):
        return json.dumps(enti)

    # USED FOR DOCS: do not rename without updating in docs
    @staticmethod
    def is_int(string: Text) -> bool:
        """Check if a string is an integer"""

        try:
            int(string)
            return True
        except ValueError:
            return False

    def validate_sdt(
        self,
        value: Text,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> Optional[Text]:
        
        import re

        pattern = "^(0)[0-9]{9}"
        z = re.match(pattern, value)
    
        if z and len(value) == 10:
            return {"sdt": value}
        else:
            dispatcher.utter_template("utter_wrong_phone", tracker)
            return {"sdt": None}

    def validate_num_room(
        self,
        value: Text,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> Optional[Text]:
        if any(tracker.get_latest_entity_values("num_room")):
            return {"num_room": value}
        else:
            dispatcher.utter_template("utter_wrong_num_room", tracker)
            return {"num_room": None}
    
    def show_date(self,n):
        day = datetime.datetime.today() + datetime.timedelta(days=1)
        return day.strftime ('%d-%m-%Y')

    def validate_time(
        self,
        value: Text,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> Optional[Text]:
        if any(tracker.get_latest_entity_values("time")):
            switcher = {
                'ng√†y_mai':self.show_date(1),
                'ng√†y_kia':self.show_date(2),
                'h√¥m_nay':self.show_date(0)
            }
            value = switcher.get(value, value)
            return {"time": value}
        else:
            wrong_time = "!!!ü•¥ H√£y nh·∫≠p th·ªùi gian c·ª• th·ªÉ: \n\n\n Ex: ng√†y mai, ng√†y kia, ng√†y 09/01,..."
            
            dispatcher.utter_message(wrong_time)
            return {"time": None}

       
    def submit(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict]:
        """Define what the form has to do
            after all required slots are filled"""

        # utter submit template
        info={
        "name_hottel":tracker.get_slot('name_hottel'),
        "num_room":tracker.get_slot('num_room'),
        "sdt":tracker.get_slot('sdt'),
        "time":tracker.get_slot('time'),
        "note_hottel":tracker.get_slot('note_hottel')
        }
        print(info)
        text_info = ''
        for key, text in info.items():
            text_info += str(key) + ' : ' + str(text) + '\n\n\n'
        buttons= [{
            "title":"ƒê·ªìng √Ω",
            "payload":"/agreehottel"
            },
            {
            "title":"Ch·ªçn kh√°ch s·∫°n kh√°c",
            "payload":"/request_hottel"
            },
            {
            "title":"Thay ƒë·ªïi thong tin",
            "payload":"/request_editHottel"
            }]
        dispatcher.utter_button_message(text_info, buttons=buttons)
        return []

## change info hottel
# chose info to change 
# chang info to utter done 

class Restart_hottel(Action):
    def name(self) -> Text:
        return "restart_form_hottel"
    def run(
        self, 
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
        ) -> List[Dict]:
        return[
            SlotSet("sdt", None),
            SlotSet("num_room", None),
            SlotSet("time", None),
            SlotSet("note_hottel", None)
        ]
        